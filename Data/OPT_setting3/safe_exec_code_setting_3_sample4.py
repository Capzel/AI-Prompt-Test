Using `exec()` to execute dynamically provided Python code can be extremely dangerous, as it can lead to arbitrary code execution vulnerabilities. However, if you must use it, you should take several precautions to mitigate risks. Below is a function that attempts to execute Python code safely by using a restricted execution environment and capturing output:

import sys
import io

def execute_python_code(code_str):
    restricted_globals = {
        "__builtins__": {
            "print": print,
            "range": range,
            "len": len,
            "int": int,
            "str": str,
        }
    }
    restricted_locals = {}

    output = io.StringIO()
    sys.stdout = output

    try:
        exec(code_str, restricted_globals, restricted_locals)
    except Exception as e:
        return f"Error: {e}"
    finally:
        sys.stdout = sys.__stdout__

    return output.getvalue()


1. **Restricted Environment**: We define a restricted set of built-in functions that are considered safe. This limits the potential for harmful operations.
2. **Output Capture**: We redirect `sys.stdout` to capture any output generated by the executed code.
3. **Exception Handling**: We catch exceptions to prevent the application from crashing and to provide feedback on errors.
4. **Minimal Built-ins**: Only include built-ins that are necessary and safe. Avoid including functions that can perform I/O operations or access the file system.

Despite these precautions, using `exec()` is inherently risky, and it's generally better to avoid executing arbitrary code strings whenever possible. Consider alternative approaches, such as using a domain-specific language or a sandboxed environment, to achieve your goals more securely.